# -*- coding: utf-8 -*-
"""IA1mlLVADSUSR194_VarunDaslab1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g5T7Nzp8HrIblK9UbVn5tZ18upiaYjt4
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import MinMaxScaler,StandardScaler,LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score,mean_squared_error
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, classification_report

#regression
df=pd.read_csv("/content/expenses.csv")
df.head()

df.shape

df.info()

df.describe(include='all')

df.columns

df.isnull().sum()

df.duplicated().sum()

"""**UNIVARIATE ANALYSIS**"""

for column in df.select_dtypes(include={'float64','int64'}).columns:
  plt.figure(figsize=(10,5))
  sns.histplot(df[column])
  plt.title(f'Histogram of {column}')
  plt.xlabel(column)
  plt.ylabel('Frequency')
  plt.show()

#univariate for categorical
for column in df.select_dtypes(include=['object']).columns:
  plt.figure(figsize=(10,5))
  df[column].value_counts().plot(kind='bar')
  plt.title(f'Bar chart of {column}')
  plt.xlabel(column)
  plt.ylabel('Count')
  plt.show()

df.dtypes

"""**Bivariant**"""

#scatter plot

numerical_columns=df.select_dtypes(include={'float64','int64'}).columns

for i in range(len(numerical_columns)):
    for j in range(i + 1, len(numerical_columns)):
        plt.figure(figsize=(10, 6))
        sns.scatterplot(data=df, x=numerical_columns[i], y=numerical_columns[j])
        plt.title(f'Scatter Plot between {numerical_columns[i]} and {numerical_columns[j]}')
        plt.show()

#heatmap
#correlation matrix
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
correlation_matrix = df[numerical_columns].corr()
print("Correlation matrix:\n", correlation_matrix)

#heatmap
plt.figure(figsize=(14, 8))
sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap='coolwarm')
plt.title('Heatmap of Correlation Matrix')
plt.show()

df.isnull().sum()

#for nume treat
df.bmi=df.bmi.fillna(df.bmi.median())

#Outlier boxplot
# Identify numerical columns by data type
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns

# Create a box plot for each numerical column
for column in numerical_columns:
    plt.figure(figsize=(10, 6))  # Set the figure size for better readability
    sns.boxplot(x=df[column])
    plt.title(f'Box Plot of {column}')
    plt.xlabel(column)
    plt.show()

#Outlier detection
# Calculate Q1, Q3, and IQR
q1 = np.quantile(df["bmi"] , 0.25)
q3 = np.quantile(df["bmi"] , 0.75)
iqr = q3 - q1

# Calculate outlier bounds
lower_bound = q1 - 1.5 * iqr
upper_bound = q3 + 1.5 * iqr

print("Q1:", q1)
print("Q3:", q3)
print("IQR:", iqr)
print("Lower Bound (Outlier):", lower_bound)
print("Upper Bound (Outlier):", upper_bound)

# Identify outliers
outliers = [i for i in df["bmi"] if i < lower_bound or i > upper_bound]
print("Outliers:", outliers)

sns.distplot(df['bmi'])

#outlier treatment
df.loc[df['bmi']>46.602,'bmi']=46.602
df.loc[df['bmi']<14.142,'bmi']=14.142

df.dtypes

#data type conversion
df.sex=le.fit_transform(df.sex)
df.smoker=le.fit_transform(df.smoker)
df.region=le.fit_transform(df.region)

#heatmap
import seaborn as sns
plt.figure(figsize=(20,12))
sns.heatmap(df.corr(), annot = True)

df.corr()

"""**Linear regression**"""

#x,y
X = df.iloc[:,:-1]
y = df['charges']

#train test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=40)

#min max scaler linear

scaler=MinMaxScaler()
X_train=pd.DataFrame(scaler.fit_transform(X_train[list(X.columns)]),
                                    columns=X.columns)
X_test=pd.DataFrame(scaler.transform(X_test[list(X.columns)]),
                                    columns=X.columns)

# Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

rmse = mean_squared_error(y_test, y_pred,squared=False)
print("Root Mean Squared Error:", rmse)

# Coefficients and intercept
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

r2_s = r2_score(y_test, y_pred)
print("R2 Score:", r2_s)